<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
    <bean class="service.SampleService" id="service">
        <property name="dao" ref="derbyDao"/>
    </bean>
    <bean class="dao.SampleFactory" id="derbyDao" factory-method="getInstance">
        <constructor-arg index="0" value="DERBY"/>
    </bean>
    <bean class="dao.SampleFactory" id="hibernateDao" factory-method="getInstance">
        <constructor-arg index="0" value="HIBERNATE"/>
    </bean>
    <bean class="msg.MessagingClass" id="messagingClass">
        <property name="host" value="sample host name"/>
        <property name="password" value="sample password"/>
        <property name="username" value = "sample username"/>
        <property name="id" value="7"/>
    </bean>
    <!--other config-->
    <bean id="additionalInfo" class="other.DaoAdditionalInfo">
        <constructor-arg index="0" value="sample additional info"/>
    </bean>
    <bean id="factoryInstance" class="other.DaoFactory"/>
    <bean id="hibernateOtherDao" class="other.HibernateDao" factory-bean="factoryInstance" factory-method="getDao">
        <constructor-arg name="daoType" value="hibernate"/>
        <property name="daoAdditionalInfo" ref="additionalInfo"/>
    </bean>
    <!--constructor based dependency injection-->
    <bean id="wheelFR" class="constructor.Wheel">
        <constructor-arg value="front right"/>
    </bean>
    <bean id="wheelFL" class="constructor.Wheel">
        <constructor-arg value="front left"/>
    </bean>
    <bean id="wheelRR" class="constructor.Wheel">
        <constructor-arg value="rear right"/>
    </bean>
    <bean id="wheelRL" class="constructor.Wheel">
        <constructor-arg value="rear left"/>
    </bean>
    <bean id="engine" class="constructor.Engine">
        <constructor-arg value="300" index="0"/>
        <constructor-arg value="bmw" index="1"/>
    </bean>
    <bean id="passenger1" class="constructor.Passenger">
        <constructor-arg index="0" value="Foo"/>
        <constructor-arg index="1" value="Bar"/>
    </bean>
    <bean id="passenger2" class="constructor.Passenger">
        <constructor-arg index="0" value="Fizz"/>
        <constructor-arg index="1" value="Buzz"/>
    </bean>
    <bean id="wheels" class="constructor.Wheels">
        <constructor-arg index="0" ref="wheelFL"/>
        <constructor-arg index="1" ref="wheelFR"/>
        <constructor-arg index="2" ref="wheelRL"/>
        <constructor-arg index="3" ref="wheelRR"/>
    </bean>
    <bean id="car" class="constructor.Car">
        <constructor-arg index="0" ref="engine"/>
        <constructor-arg index="1" ref="wheels"/>
        <constructor-arg>
            <list>
                <bean id="asd" parent="passenger1"/>
                <bean id="asd" parent="passenger2"/>
            </list>
        </constructor-arg>
    </bean>
    <!--combining configuration via setter and constructor-->
    <bean class="combining.EmailMessageSender" id="emailMessageSender"/>
    <bean class="combining.JmsMessageSender" id="jmsMessageSender"/>
    <bean class="combining.BankingService" id="bankingService">
        <constructor-arg ref="emailMessageSender"/>
        <property name="second" ref="jmsMessageSender"/>
    </bean>

    <!--configuration using abstract bean in order to avoid code repetition-->
    <bean id="bankService" class="inheritance.nonconcrete.BankService"/>
    <bean id="abstractController" abstract="true">
        <constructor-arg type="inheritance.nonconcrete.BankService" ref="bankService"/>
    </bean>
    <bean id="biggerBankController" parent="abstractController" class="inheritance.nonconcrete.BiggerBankController">
        <constructor-arg name="name" value="works!"/>
    </bean>
    <bean id="smallerBankController" parent="abstractController" class="inheritance.nonconcrete.SmallerBankService"/>

    <!--non abstract parent bean definition-->
    <bean id="emailMessaging" class="inheritance.concrete.EmailMessaging"/>
    <bean id="jmsMessaging" class="inheritance.concrete.JmsMessaging"/>

    <bean id="templateService" class="inheritance.concrete.TemplateService">
        <constructor-arg name="services">
            <list>
                <ref bean="jmsMessaging"/>
                <ref bean="emailMessaging"/>
            </list>
        </constructor-arg>
    </bean>
    <bean id="sampleService" class="inheritance.concrete.SampleService" parent="templateService">
        <constructor-arg name="name" value="sample name"/>
    </bean>
    <!--factory method inheritance -->
    <bean id="controllerFactory" class="factory.ControllerFactory"/>
    <!--<bean id="parentController" abstract="true" factory-bean="controllerFactory" factory-method="getController"/>-->
    <bean id="parentController" class="factory.ControllerFactory" factory-bean="controllerFactory" factory-method="getController">
        <constructor-arg index="0" value="OtherController"/>
    </bean>
    <bean id="otherController" parent="parentController" factory-bean="controllerFactory" factory-method="getController">
        <constructor-arg index="0" value="OtherController"/>
    </bean>
    <!--different arg type passing to constructor-->
    <bean id="sService" class="args.different.SampleService"/>
    <bean id="sController" class="args.different.SampleController">
        <!--passing components to constructor via ref attribute-->
        <constructor-arg name="sampleService" ref="sService"/>
        <!--passing primitive type values to constructor via value attribute-->
        <constructor-arg name="intValue" value="10"/>
        <constructor-arg name="stringValue" value="foo"/>
    </bean>
    <!--constructor argument detection based on types-->
    <bean id="firstService" class="args.detection.FirstService"/>
    <bean id="secondService" class="args.detection.SecondService"/>
    <bean id="sampleController" class="args.detection.SampleController">
        <constructor-arg ref="firstService"/>
        <constructor-arg ref="secondService"/>
    </bean>
    <!--related constructor arguments-->
    <bean id="fstService" class="args.matching.FirstService"/>
    <bean id="sndService" class="args.matching.SecondService"/>
    <bean id="mController" class="args.matching.MainController">
        <constructor-arg ref="sndService"/>
        <constructor-arg ref="fstService"/>
    </bean>
    <!--Passing constructor args based on names passed to @ConstructorProperties-->
    <bean id="nameBasedService" class="args.name.NameBasedService">
        <constructor-arg name="arg1" value="value1"/>
        <constructor-arg name="arg2" value="value2"/>
        <constructor-arg name="arg3" value="value3"/>
    </bean>
    <!--Name based bean config with definition inheritance-->
    <bean id="otherBankingService" class="args.name.BankingService">
        <constructor-arg name="arg1" value="value1"/>
        <constructor-arg name="arg2" value="value2"/>
        <constructor-arg name="arg3" value="value3"/>
    </bean>
    <!--Creating bean template with factory method where argument matching is based on names-->
    <bean id="serviceFactory" class="args.debug.ServiceFactory"/>
    <bean id="firstServiceTemplate" abstract="true" factory-bean="serviceFactory" factory-method="getService">
        <constructor-arg name="type" ref="base"/>
    </bean>
    <bean id="firstServiceWorks" parent="firstServiceTemplate" class="args.debug.FirstService" factory-bean="serviceFactory" factory-method="getService">
        <constructor-arg name="arg" ref="derived"/>
    </bean>
    <bean id="base" class="args.debug.Base">
        <constructor-arg value="first"/>
    </bean>
    <bean id="derived" class="args.debug.Derived">
        <constructor-arg value="works!"/>
    </bean>
    <!--Property editor based config-->
    <bean id="propertyEditorUsageExample" class="editors.PropertyEditorSampleClass">
        <property name="charArray" value="sample char arr"/>
        <property name="charValue" value="Y"/>
        <property name="doubleValue" value="0.07"/>
        <property name="intValue" value="7"/>
        <property name="properties">
            <value>
                x = Sample x value
                y = Sample y value
            </value>
        </property>
        <property name="string" value="Sample String value"/>
        <property name="sample" value="test"/>
    </bean>
    <!--Containers bean config-->
    <bean id="beanWithContainers" class="containers.ClassWithContainers">
        <constructor-arg name="intType">
            <set>
                <value>1</value>
                <value>2</value>
            </set>
        </constructor-arg>
        <constructor-arg name="listType">
            <list>
                <value>1</value>
                <value>2</value>
            </list>
        </constructor-arg>
        <constructor-arg name="mapType">
            <map>
                <entry key="1" value="2"/>
            </map>
        </constructor-arg>
        <constructor-arg name="properties">
            <props>
                <prop key="Foo">Bar</prop>
            </props>
        </constructor-arg>
    </bean>
    <!--Class with nested collection-->
    <bean id="classWithNestedCollection" class="nested.ClassWithNestedCollection">
        <constructor-arg name="list">
            <list>
                <set>
                    <value>foo</value>
                </set>
            </list>
        </constructor-arg>
    </bean>
    <!--Class with collection of components-->
    <bean id="sampleComponent" class="ref.SampleBean">
        <constructor-arg value="foo"/>
    </bean>


    <bean id="collectionWithComponents" class="ref.CollectionWithComponents">
        <constructor-arg>
            <list>
                <ref bean="sampleComponent"/>
            </list>
        </constructor-arg>
    </bean>
    <!--Example of bean which uses idref element-->
    <bean name="sampleBean" class="idref.SampleBean">
        <constructor-arg value="foo"/>
    </bean>
    <bean id="idRefUsage" class="idref.IdRefUsage">
        <constructor-arg>
            <map>
                <entry value-ref="sampleBean">
                    <key>
                        <idref bean="sampleBean"/>
                    </key>
                </entry>

            </map>
        </constructor-arg>
    </bean>



</beans>